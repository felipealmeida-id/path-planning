import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import json

def is_incorrect_move(point1, point2):
    return abs(point1[0] - point2[0]) > 1 or abs(point1[1] - point2[1]) > 1

def animate_drones_trayectories_persistent_errors(data):
    fig, ax = plt.subplots(figsize=(10, 10))
    
    # Lista de colores que excluye el rojo. Puedes agregar más colores si lo necesitas.
    color_list = ['b', 'g', 'c', 'm', 'y', 'k']
    if len(data) > len(color_list):
        raise ValueError("No hay suficientes colores en la paleta para todos los drones.")
    
    lines = []
    current_positions = []
    error_lines = []
    error_markers = []
    
    for drone_index, drone_data in enumerate(data):
        drone_color = color_list[drone_index]
        line, = ax.plot([], [], drone_color + '-', alpha=0.3)  
        lines.append(line)
        current_position, = ax.plot([], [], drone_color + 'o', label='Drone {}'.format(drone_index+1))
        current_positions.append(current_position)
        error_line, = ax.plot([], [], 'r-')  
        error_lines.append(error_line)
        error_marker, = ax.plot([], [], 'rx', markersize=10)  
        error_markers.append(error_marker)
    
    time_text = ax.text(0.02, 0.97, '', transform=ax.transAxes, verticalalignment='top')
    error_points = [[] for _ in data]
    
    def init():
        for line, current_position, error_line, error_marker in zip(lines, current_positions, error_lines, error_markers):
            line.set_data([], [])
            current_position.set_data([], [])
            error_line.set_data([], [])
            error_marker.set_data([], [])
        time_text.set_text('')
        return lines + [time_text] + current_positions + error_markers + error_lines
    
    def animate(i):
        for drone_data, line, current_position, error_line, error_marker in zip(data, lines, current_positions, error_lines, error_markers):
            x_values = [point[0] for point in drone_data[:i+1]]
            y_values = [point[1] for point in drone_data[:i+1]]
            
            if i > 0 and is_incorrect_move(drone_data[i-1], drone_data[i]):
                error_points[data.index(drone_data)].append((drone_data[i-1], drone_data[i]))
            
            error_x = [point[0] for segment in error_points[data.index(drone_data)] for point in segment]
            error_y = [point[1] for segment in error_points[data.index(drone_data)] for point in segment]
            
            line.set_data(x_values, y_values)
            current_position.set_data(x_values[-1], y_values[-1])
            error_line.set_data(error_x, error_y)
            error_marker.set_data(error_x, error_y)
        time_text.set_text('Tiempo: {}'.format(i))
        return lines + [time_text] + current_positions + error_markers + error_lines

    x_min = min([point[0] for drone in data for point in drone]) - 1
    x_max = max([point[0] for drone in data for point in drone]) + 1
    y_min = min([point[1] for drone in data for point in drone]) - 1
    y_max = max([point[1] for drone in data for point in drone]) + 1
    
    ax.set_xlim(0, 30)
    ax.set_ylim(0, 30)
    ax.set_xticks(range(0, 31))
    ax.set_yticks(range(0, 31))
    
    ax.set_title("Trayectorias de Drones (Animación)")
    ax.set_xlabel("Coordenada X")
    ax.set_ylabel("Coordenada Y")
    ax.legend(loc="upper left")
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    
    anim = FuncAnimation(fig, animate, init_func=init, frames=max(len(drone) for drone in data)+1, interval=100, blit=True, repeat=False)
    plt.show()

# Load data from string (simulating json.load)
data_str = '[[[0, 0], [0, 0], [1, 0], [1, 0], [2, 8], [0, 0], [0, 2], [1, 0], [0, 0], [3, 0], [4, 2], [0, 0], [3, 1], [1, 0], [20, 0], [0, 28], [24, 0], [2, 1], [0, 11], [1, 0], [0, 0], [5, 1], [0, 6], [12, 0], [1, 7], [7, 4], [1, 27], [1, 1], [0, 8], [0, 2], [0, 6], [1, 18], [0, 30], [0, 1], [0, 30], [0, 23], [0, 25], [0, 23], [0, 30], [0, 10], [0, 30], [0, 19], [0, 14], [1, 30], [0, 20], [0, 30], [0, 30], [0, 21], [21, 30], [2, 30], [1, 29], [17, 19], [0, 10], [0, 30], [7, 20], [1, 9], [20, 30], [0, 28], [3, 23], [15, 30], [0, 26], [16, 14], [0, 30], [27, 2], [1, 10], [15, 11], [0, 29], [4, 22], [25, 7], [2, 27], [0, 14], [13, 18], [1, 29], [27, 17], [0, 9], [3, 29], [2, 29], [2, 26], [2, 2], [0, 29], [4, 21], [1, 28], [5, 30], [4, 25], [2, 29], [2, 25], [3, 30], [5, 30], [17, 30], [0, 27], [0, 28], [13, 30], [3, 21], [3, 30], [4, 30], [13, 17], [0, 30], [1, 18], [5, 30], [5, 16], [1, 30], [2, 4], [2, 19], [1, 30], [1, 30], [0, 9], [8, 24], [1, 24], [13, 16], [0, 30], [13, 1], [5, 18], [1, 8], [26, 23], [30, 15], [0, 0], [21, 0], [5, 5], [23, 4], [1, 0], [2, 4], [29, 0], [1, 20], [27, 4], [8, 28], [30, 0], [20, 0], [1, 8], [30, 20], [2, 4], [0, 23], [30, 0], [2, 5], [9, 0], [22, 3], [9, 0], [30, 0], [0, 4], [0, 3], [17, 7], [0, 13], [23, 2], [19, 1], [1, 26], [6, 3], [0, 7], [0, 18], [8, 1], [0, 22], [10, 12], [0, 30], [1, 1], [1, 8], [0, 30], [0, 20], [5, 30], [1, 17], [0, 28], [0, 10], [0, 30], [0, 30], [1, 11], [0, 28], [0, 28], [2, 30], [0, 19], [0, 30], [2, 28], [0, 25], [7, 29], [15, 29], [0, 30], [7, 14], [2, 30], [1, 21], [0, 30], [0, 24], [10, 30], [0, 23], [1, 30], [0, 30], [2, 0], [0, 15], [9, 30], [7, 30], [1, 5], [2, 29], [4, 6], [20, 29], [5, 12], [20, 7], [0, 16], [24, 30], [7, 1], [23, 16], [1, 18], [27, 1], [23, 23], [22, 1], [14, 4], [25, 1], [1, 6], [28, 0], [1, 2], [29, 0], [2, 6], [27, 3], [1, 0], [29, 0], [2, 1], [23, 0], [0, 2], [1, 1], [28, 0], [25, 5], [0, 0], [6, 0], [22, 2], [0, 0], [25, 1], [29, 1], [0, 0], [0, 0], [14, 16], [23, 25], [0, 0], [12, 1], [2, 4], [6, 1], [0, 29], [10, 11], [1, 24], [1, 10], [25, 22], [6, 16], [0, 30], [1, 26], [0, 30], [0, 28], [1, 16], [0, 30], [1, 3], [2, 23], [5, 30], [0, 24], [1, 30], [1, 30], [1, 26], [0, 30], [0, 29], [1, 30], [1, 26], [5, 29], [0, 30], [2, 29], [0, 30], [1, 30], [0, 30], [5, 24], [0, 30], [4, 26], [1, 30], [3, 9], [4, 30], [0, 30], [1, 22], [5, 27], [3, 7], [5, 17], [11, 30], [26, 20], [17, 1], [2, 19], [9, 30], [7, 18], [25, 23], [23, 16], [26, 0], [9, 14], [22, 1], [24, 11], [3, 0], [9, 0], [30, 10], [10, 0], [29, 18], [5, 6], [30, 0], [19, 0], [29, 4], [30, 0], [2, 1], [30, 0], [1, 0], [30, 0], [4, 0], [30, 0], [8, 1], [30, 0], [2, 0], [6, 0], [30, 0], [2, 0], [30, 0], [1, 0], [30, 0], [24, 0], [2, 0], [30, 1], [2, 0], [29, 1], [0, 0], [4, 0], [30, 0], [26, 0], [0, 1], [30, 0], [1, 10], [0, 0], [12, 13], [17, 28], [3, 0], [4, 12], [0, 28], [15, 30], [0, 0], [0, 30], [0, 1], [2, 18], [0, 30], [0, 14], [0, 30], [0, 30], [0, 16], [0, 30], [0, 30], [0, 30], [2, 27], [0, 30], [0, 27], [1, 30], [0, 28], [0, 30], [0, 29], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 29], [0, 30], [0, 30], [0, 30], [0, 30], [0, 29], [0, 30], [1, 30], [16, 30], [0, 30], [3, 30], [1, 30], [0, 30], [6, 28], [3, 30], [0, 12], [0, 15], [2, 30], [0, 0], [2, 25], [1, 15], [0, 20], [27, 27], [2, 2], [3, 11], [2, 4], [1, 2], [28, 1], [28, 0], [4, 26], [16, 4], [3, 1], [9, 0], [1, 4], [2, 6], [0, 0], [2, 4], [1, 1], [6, 1], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [2, 1], [0, 1], [1, 9], [1, 1], [2, 1], [0, 1], [3, 5], [1, 0], [4, 0], [0, 2], [0, 5], [1, 0], [0, 2], [2, 22], [11, 0], [4, 3], [6, 0], [0, 3], [6, 11], [1, 2], [4, 0], [1, 0], [0, 7], [2, 0], [5, 18], [1, 8], [0, 1], [0, 19], [4, 16], [1, 1], [1, 4], [1, 23], [2, 16], [5, 1], [2, 2], [16, 3], [3, 1], [21, 12], [1, 28], [0, 0], [0, 2], [28, 1], [28, 7], [2, 0], [5, 0], [20, 24], [0, 28], [24, 0], [5, 1], [0, 4], [0, 1], [18, 11], [1, 14], [27, 4], [24, 0], [0, 3], [22, 0], [0, 26], [30, 0], [0, 16], [30, 1], [7, 6], [30, 3], [0, 0], [0, 0], [29, 8], [30, 2], [0, 5], [30, 0], [0, 8], [25, 9], [0, 0], [0, 2], [29, 4], [26, 29], [0, 0], [3, 10], [29, 10], [1, 1], [17, 12], [12, 0], [6, 10], [0, 27], [11, 0], [2, 0], [1, 29], [17, 29], [0, 1], [1, 24], [1, 5], [0, 27], [3, 5], [10, 29], [8, 15], [1, 27], [7, 23], [0, 28], [6, 30], [0, 30], [10, 24], [1, 30], [2, 23], [0, 23], [3, 30], [0, 24], [0, 30], [0, 30], [1, 26], [0, 28], [0, 29], [0, 30], [0, 19], [5, 30], [0, 25], [0, 30], [16, 27], [3, 23], [0, 29], [0, 30], [10, 23], [18, 27], [5, 27], [3, 8], [1, 30], [15, 18], [0, 13], [3, 26], [22, 4], [8, 0], [7, 11], [0, 8], [30, 1], [30, 25], [5, 0], [0, 6], [30, 0], [2, 11], [30, 0], [1, 1], [28, 0], [17, 0], [29, 0], [28, 2], [10, 0], [30, 0], [0, 3], [17, 2], [29, 0], [0, 0], [27, 0], [29, 0], [0, 1], [30, 0], [0, 0], [0, 1], [22, 13], [10, 2], [0, 16], [0, 1], [2, 28], [3, 2], [9, 27], [0, 29], [3, 0], [18, 0], [0, 30], [0, 29], [7, 6], [0, 30], [0, 2], [1, 19], [0, 30], [0, 30], [0, 27], [2, 30], [0, 13], [1, 30], [0, 22], [0, 30], [0, 7], [0, 27], [2, 30], [0, 30], [0, 20], [0, 30], [2, 30], [0, 30], [12, 29], [0, 23], [0, 30], [1, 29], [1, 25], [0, 30], [0, 30], [0, 29], [0, 29], [0, 23], [7, 30], [5, 29], [1, 28], [2, 6], [3, 30], [10, 19], [2, 30], [2, 26], [14, 17], [26, 26], [6, 1], [2, 29], [29, 2], [2, 10], [18, 1], [18, 0], [18, 26], [2, 6], [24, 3], [0, 12], [30, 0], [28, 0], [0, 14], [30, 19], [0, 0], [7, 3], [28, 0], [2, 21], [30, 0], [0, 0], [29, 6], [0, 2], [28, 19], [28, 1], [0, 11], [1, 4], [26, 2], [0, 1], [5, 23], [25, 2], [0, 8], [0, 15], [22, 1], [0, 13], [18, 3], [1, 15], [25, 20], [3, 30], [2, 1], [0, 28], [1, 1], [4, 27], [1, 0], [0, 30], [1, 1], [0, 30], [1, 6], [0, 2], [0, 30], [0, 30], [0, 0], [0, 22], [0, 30], [0, 29], [0, 30], [0, 30], [0, 29], [0, 30], [0, 30], [0, 30], [5, 30], [1, 30], [0, 30], [0, 30], [0, 30], [0, 29], [1, 30], [0, 30], [0, 30], [0, 30], [0, 30], [0, 30], [1, 30], [1, 30], [0, 29], [0, 30], [0, 30], [1, 30], [0, 30], [1, 30], [7, 30], [0, 30], [2, 30], [0, 30], [0, 30], [1, 30], [0, 30], [0, 29], [14, 29], [2, 30], [0, 19], [0, 12], [26, 30], [25, 28], [3, 4], [1, 30], [5, 25], [21, 9], [0, 5], [22, 23], [1, 0], [1, 0], [29, 27], [30, 1], [0, 13], [30, 4], [0, 0], [1, 0], [30, 5], [0, 4], [30, 0], [0, 4], [30, 0], [30, 0], [2, 0], [0, 0], [30, 0], [4, 0], [30, 0], [29, 1], [1, 0], [6, 5], [29, 0], [16, 1], [25, 0], [29, 0], [16, 1], [20, 1], [23, 0], [22, 0], [2, 4], [29, 0], [5, 28], [11, 19], [23, 0], [0, 28], [28, 0], [11, 29], [5, 0], [17, 2], [0, 21], [1, 11], [4, 2], [3, 24], [0, 2], [0, 29], [1, 1], [0, 24], [0, 9], [11, 29], [0, 12], [0, 2], [6, 30], [0, 19], [0, 29], [1, 30], [0, 22], [0, 29], [0, 29], [0, 30], [5, 14], [0, 6], [0, 30], [0, 30], [0, 3], [0, 22], [0, 30], [0, 2], [0, 29], [0, 0], [0, 19], [0, 18], [0, 3], [0, 1], [0, 16], [0, 12], [0, 17], [2, 16], [0, 0], [0, 0], [1, 1], [0, 0], [0, 2], [0, 0], [0, 0], [0, 0]]]'
data = json.loads(data_str)
animate_drones_trayectories_persistent_errors(data)
