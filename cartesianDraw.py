import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import json

def is_incorrect_move(point1, point2):
    return abs(point1[0] - point2[0]) > 1 or abs(point1[1] - point2[1]) > 1

def animate_drones_trayectories_persistent_errors(data):
    fig, ax = plt.subplots(figsize=(10, 10))
    
    # Lista de colores que excluye el rojo. Puedes agregar más colores si lo necesitas.
    color_list = ['b', 'g', 'c', 'm', 'y', 'k']
    if len(data) > len(color_list):
        raise ValueError("No hay suficientes colores en la paleta para todos los drones.")
    
    lines = []
    current_positions = []
    error_lines = []
    error_markers = []
    
    for drone_index, drone_data in enumerate(data):
        drone_color = color_list[drone_index]
        line, = ax.plot([], [], drone_color + '-', alpha=0.3)  
        lines.append(line)
        current_position, = ax.plot([], [], drone_color + 'o', label='Drone {}'.format(drone_index+1))
        current_positions.append(current_position)
        error_line, = ax.plot([], [], 'r-')  
        error_lines.append(error_line)
        error_marker, = ax.plot([], [], 'rx', markersize=10)  
        error_markers.append(error_marker)
    
    time_text = ax.text(0.02, 0.97, '', transform=ax.transAxes, verticalalignment='top')
    error_points = [[] for _ in data]
    
    def init():
        for line, current_position, error_line, error_marker in zip(lines, current_positions, error_lines, error_markers):
            line.set_data([], [])
            current_position.set_data([], [])
            error_line.set_data([], [])
            error_marker.set_data([], [])
        time_text.set_text('')
        return lines + [time_text] + current_positions + error_markers + error_lines
    
    def animate(i):
        for drone_data, line, current_position, error_line, error_marker in zip(data, lines, current_positions, error_lines, error_markers):
            x_values = [point[0] for point in drone_data[:i+1]]
            y_values = [point[1] for point in drone_data[:i+1]]
            
            if i > 0 and is_incorrect_move(drone_data[i-1], drone_data[i]):
                error_points[data.index(drone_data)].append((drone_data[i-1], drone_data[i]))
            
            error_x = [point[0] for segment in error_points[data.index(drone_data)] for point in segment]
            error_y = [point[1] for segment in error_points[data.index(drone_data)] for point in segment]
            
            line.set_data(x_values, y_values)
            current_position.set_data(x_values[-1], y_values[-1])
            error_line.set_data(error_x, error_y)
            error_marker.set_data(error_x, error_y)
        time_text.set_text('Tiempo: {}'.format(i))
        return lines + [time_text] + current_positions + error_markers + error_lines

    x_min = min([point[0] for drone in data for point in drone]) - 1
    x_max = max([point[0] for drone in data for point in drone]) + 1
    y_min = min([point[1] for drone in data for point in drone]) - 1
    y_max = max([point[1] for drone in data for point in drone]) + 1
    
    ax.set_xlim(0, 30)
    ax.set_ylim(0, 30)
    ax.set_xticks(range(0, 31))
    ax.set_yticks(range(0, 31))
    
    ax.set_title("Trayectorias de Drones (Animación)")
    ax.set_xlabel("Coordenada X")
    ax.set_ylabel("Coordenada Y")
    ax.legend(loc="upper left")
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    
    anim = FuncAnimation(fig, animate, init_func=init, frames=max(len(drone) for drone in data)+1, interval=100, blit=True, repeat=False)
    plt.show()

# Load data from string (simulating json.load)
data_str = '[[[0, 0], [1, 0], [2, 0], [1, 0], [0, 1], [0, 0], [0, 1], [0, 0], [1, 1], [0, 0], [1, 0], [1, 1], [0, 0], [1, 1], [1, 2], [0, 3], [0, 4], [1, 4], [0, 5], [0, 6], [0, 7], [1, 6], [2, 6], [3, 7], [4, 8], [3, 8], [2, 7], [2, 8], [1, 8], [2, 8], [1, 8], [0, 8], [1, 9], [0, 10], [0, 11], [1, 12], [0, 13], [0, 12], [1, 11], [2, 10], [3, 9], [4, 9], [5, 9], [6, 9], [6, 8], [5, 9], [5, 10], [5, 11], [6, 11], [5, 10], [6, 11], [5, 10], [4, 11], [3, 11], [2, 11], [1, 10], [0, 9], [0, 8], [1, 7], [0, 7], [0, 6], [0, 5], [1, 4], [2, 5], [1, 5], [2, 4], [1, 5], [2, 4], [1, 5], [2, 6], [3, 5], [3, 6], [2, 6], [1, 7], [0, 6], [1, 7], [0, 6], [1, 7], [1, 6], [2, 7], [1, 8], [2, 8], [3, 8], [4, 7], [5, 8], [5, 9], [4, 8], [4, 7], [5, 7], [6, 8], [7, 8], [8, 8], [7, 8], [6, 9], [7, 8], [7, 9], [7, 10], [6, 11], [5, 11], [4, 12], [3, 11], [4, 12], [5, 13], [4, 13], [5, 13], [5, 12], [5, 11], [4, 12], [3, 11], [3, 12], [4, 12], [4, 13], [3, 14], [3, 15], [2, 14], [3, 15], [4, 15], [3, 15], [3, 16], [3, 15], [3, 14], [4, 15], [4, 16], [3, 16], [4, 16], [5, 17], [6, 16], [6, 15], [5, 16], [6, 15], [5, 14], [6, 14], [7, 13], [6, 14], [6, 13], [7, 12], [8, 13], [7, 12], [6, 12], [6, 11], [6, 12], [6, 11], [6, 10], [7, 11], [6, 12], [7, 12], [8, 11], [9, 10], [9, 11], [9, 10], [9, 11], [10, 10], [11, 10], [12, 11], [13, 12], [14, 13], [13, 14], [12, 14], [11, 15], [10, 15], [9, 16], [10, 17], [11, 16], [10, 17], [10, 18], [9, 19], [9, 20], [8, 19], [7, 19], [7, 18], [6, 17], [7, 16], [7, 17], [8, 18], [7, 17], [7, 16], [6, 16], [7, 15], [8, 14], [7, 14], [8, 13], [7, 14], [8, 15], [8, 16], [8, 17], [8, 16], [8, 15], [9, 15], [10, 16], [9, 17], [8, 18], [7, 17], [8, 18], [8, 19], [9, 18], [8, 17], [9, 18], [10, 19], [10, 20], [11, 20], [12, 20], [13, 19], [13, 18], [14, 17], [13, 16], [14, 15], [14, 16], [13, 15], [12, 16], [11, 15], [12, 16], [11, 17], [10, 17], [11, 17], [10, 17], [9, 18], [8, 19], [7, 19], [8, 19], [7, 18], [6, 17], [6, 18], [5, 18], [5, 19], [6, 19], [7, 19], [8, 19], [7, 19], [8, 19], [7, 19], [8, 20], [8, 21], [7, 22], [6, 23], [7, 22], [7, 23], [8, 23], [7, 22], [8, 23], [8, 22], [8, 21], [9, 22], [10, 23], [9, 23], [8, 23], [8, 22], [9, 21], [10, 21], [10, 22], [11, 21], [10, 20], [10, 19], [10, 20], [11, 19], [10, 18], [10, 19], [10, 18], [10, 17], [11, 18], [11, 19], [12, 18], [12, 17], [11, 17], [10, 16], [10, 15], [11, 15], [10, 16], [9, 16], [9, 15], [8, 16], [9, 16], [9, 15], [10, 16], [9, 15], [8, 16], [9, 17], [10, 17], [9, 18], [9, 19], [10, 18], [9, 18], [10, 19], [11, 19], [10, 19], [10, 20], [9, 21], [8, 21], [9, 21], [10, 20], [9, 21], [9, 22], [9, 21], [8, 22], [9, 21], [10, 21], [9, 21], [9, 22], [8, 22], [9, 22], [10, 23], [9, 23], [8, 24], [8, 23], [8, 22], [7, 22], [6, 23], [7, 22], [7, 23], [6, 24], [5, 23], [5, 24], [4, 23], [5, 22], [4, 23], [5, 22], [6, 23], [7, 23], [6, 22], [5, 22], [4, 22], [4, 21], [3, 22], [3, 21], [4, 20], [3, 21], [4, 22], [3, 23], [2, 24], [1, 23], [2, 24], [3, 25], [3, 26], [3, 25], [4, 25], [4, 26], [4, 25], [4, 24], [3, 23], [2, 22], [1, 21], [0, 20], [0, 19], [1, 20], [0, 21], [0, 22], [1, 21], [0, 21], [1, 22], [0, 23], [0, 24], [1, 24], [2, 24], [1, 24], [0, 24], [1, 25], [0, 24], [1, 24], [2, 24], [1, 23], [0, 23], [1, 22], [1, 21], [0, 20], [1, 20], [2, 20], [3, 21], [2, 22], [3, 23], [3, 22], [2, 22], [2, 21], [3, 21], [2, 22], [2, 23], [2, 22], [2, 23], [3, 22], [4, 22], [3, 21], [2, 20], [1, 19], [0, 18], [0, 17], [0, 16], [0, 15], [0, 14], [0, 13], [0, 12], [0, 11], [0, 10], [0, 9], [0, 8], [0, 7], [0, 6], [0, 5], [0, 4], [0, 3], [0, 2], [0, 1], [0, 0], [0, 0]], [[0, 0], [0, 1], [1, 1], [1, 0], [0, 1], [0, 2], [0, 3], [1, 4], [2, 3], [3, 4], [2, 5], [3, 4], [4, 5], [4, 6], [4, 5], [3, 6], [3, 7], [2, 6], [3, 7], [2, 8], [1, 9], [2, 8], [2, 9], [3, 8], [2, 8], [1, 9], [1, 8], [2, 7], [1, 8], [1, 7], [1, 6], [2, 5], [2, 6], [2, 5], [3, 6], [3, 5], [2, 4], [3, 3], [2, 3], [3, 4], [2, 4], [1, 5], [1, 6], [0, 7], [0, 6], [1, 5], [1, 6], [0, 7], [1, 8], [2, 8], [2, 7], [3, 8], [2, 9], [3, 8], [4, 9], [3, 9], [4, 9], [5, 9], [5, 8], [4, 9], [3, 10], [2, 10], [3, 11], [3, 10], [4, 9], [3, 10], [4, 11], [5, 12], [4, 12], [3, 11], [3, 10], [4, 10], [4, 11], [5, 12], [6, 12], [5, 13], [5, 14], [6, 14], [6, 13], [7, 14], [6, 13], [5, 14], [5, 15], [6, 16], [5, 17], [4, 16], [4, 15], [4, 16], [3, 15], [4, 15], [4, 16], [3, 16], [4, 15], [3, 15], [4, 16], [3, 16], [3, 15], [4, 15], [3, 14], [2, 14], [1, 15], [0, 16], [1, 15], [1, 14], [2, 13], [1, 12], [0, 12], [1, 12], [0, 11], [1, 12], [0, 12], [1, 11], [0, 12], [1, 11], [2, 10], [1, 10], [1, 11], [0, 11], [1, 12], [0, 12], [1, 13], [2, 14], [1, 14], [0, 14], [0, 15], [0, 14], [0, 15], [1, 15], [0, 16], [1, 15], [0, 15], [0, 14], [0, 13], [1, 14], [1, 13], [1, 14], [2, 15], [2, 16], [2, 17], [1, 16], [0, 15], [0, 16], [1, 17], [2, 16], [1, 16], [0, 15], [0, 16], [1, 16], [2, 15], [3, 15], [3, 16], [3, 17], [2, 18], [3, 19], [2, 18], [1, 17], [1, 16], [0, 16], [0, 15], [1, 14], [1, 13], [2, 13], [1, 12], [1, 13], [2, 12], [3, 12], [4, 13], [4, 14], [3, 13], [3, 12], [2, 12], [2, 13], [3, 12], [2, 11], [3, 10], [4, 10], [5, 10], [5, 9], [4, 9], [5, 9], [5, 10], [4, 9], [3, 10], [3, 9], [2, 9], [3, 9], [3, 8], [4, 9], [5, 10], [5, 9], [5, 10], [6, 10], [7, 11], [6, 12], [6, 11], [6, 12], [5, 11], [6, 10], [7, 9], [8, 9], [8, 8], [7, 9], [8, 8], [7, 7], [6, 7], [6, 6], [5, 5], [5, 4], [6, 3], [7, 2], [6, 3], [6, 4], [7, 5], [8, 5], [9, 4], [9, 3], [10, 4], [10, 5], [10, 4], [11, 3], [12, 4], [13, 4], [12, 3], [13, 4], [12, 5], [12, 6], [13, 6], [12, 7], [11, 7], [11, 6], [12, 7], [11, 7], [12, 8], [11, 7], [10, 7], [11, 7], [11, 8], [11, 7], [12, 6], [13, 7], [14, 8], [13, 9], [13, 8], [12, 9], [13, 9], [12, 8], [11, 9], [11, 8], [11, 9], [10, 9], [9, 10], [10, 10], [10, 9], [10, 8], [10, 7], [9, 8], [9, 9], [8, 8], [9, 8], [10, 7], [10, 6], [10, 5], [11, 4], [11, 3], [12, 3], [12, 4], [11, 5], [10, 5], [11, 6], [12, 7], [12, 8], [11, 7], [10, 8], [10, 9], [10, 10], [10, 11], [9, 10], [9, 9], [8, 10], [8, 9], [7, 10], [6, 9], [7, 8], [8, 9], [7, 9], [8, 9], [9, 9], [10, 8], [11, 7], [10, 7], [10, 8], [10, 9], [11, 10], [12, 9], [12, 8], [12, 9], [13, 8], [12, 7], [12, 8], [12, 7], [11, 7], [12, 6], [11, 7], [10, 8], [9, 8], [9, 7], [10, 8], [9, 8], [10, 7], [9, 6], [9, 5], [10, 5], [10, 4], [10, 5], [10, 6], [10, 7], [9, 7], [10, 7], [11, 7], [12, 8], [13, 9], [12, 9], [13, 9], [12, 8], [11, 7], [10, 7], [9, 8], [10, 9], [9, 10], [10, 11], [11, 10], [10, 10], [11, 10], [12, 10], [12, 11], [11, 12], [12, 12], [13, 12], [13, 13], [14, 14], [14, 15], [15, 16], [14, 17], [14, 18], [15, 19], [14, 20], [15, 19], [16, 19], [16, 18], [17, 18], [16, 17], [15, 17], [16, 17], [17, 17], [17, 18], [18, 19], [19, 18], [20, 19], [21, 18], [22, 17], [23, 18], [23, 17], [22, 17], [21, 17], [20, 17], [19, 17], [20, 17], [20, 18], [21, 18], [21, 17], [22, 16], [22, 15], [23, 15], [22, 15], [21, 15], [20, 15], [21, 14], [20, 14], [20, 15], [19, 15], [18, 16], [18, 17], [17, 16], [16, 15], [15, 14], [14, 13], [13, 12], [12, 11], [11, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 0], [0, 0], [0, 0]]]'
data = json.loads(data_str)
animate_drones_trayectories_persistent_errors(data)
