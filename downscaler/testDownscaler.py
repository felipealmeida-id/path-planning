from torch import tensor,no_grad, load
from torch.nn import Module,Sequential,Linear,ReLU
import torch
import numpy as np
import matplotlib.pyplot as plt

device = "cuda" if torch.cuda.is_available() else "cpu"
input = [[[0, 0], [0, 1], [0, 2], [0, 3], [0, 2], [1, 2], [0, 2], [1, 1], [2, 0], [1, 0], [2, 0], [3, 0], [2, 0], [3, 1], [4, 2], [3, 3], [2, 2], [3, 3], [2, 3], [3, 2], [2, 3], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 9], [16, 10], [15, 11], [14, 12], [13, 13], [12, 14], [11, 15], [10, 16], [9, 17], [8, 18], [7, 19], [6, 20], [5, 21], [4, 22], [3, 23], [4, 23], [5, 23], [4, 23], [5, 22], [6, 21], [7, 20], [8, 19], [9, 18], [10, 17], [11, 16], [12, 15], [13, 14], [14, 13], [15, 12], [16, 11], [16, 10], [16, 9], [16, 8], [17, 8], [18, 8], [17, 7], [18, 6], [19, 7], [20, 6], [21, 5], [22, 4], [21, 5], [21, 6], [22, 6], [23, 7], [22, 8], [23, 9], [23, 8], [23, 7], [24, 6], [23, 7], [22, 8], [21, 9], [20, 10], [19, 11], [18, 12], [17, 13], [16, 14], [15, 15], [14, 16], [13, 17], [12, 18], [11, 19], [10, 20], [9, 21], [8, 22], [7, 22], [6, 22], [5, 22], [4, 22], [5, 21], [6, 20], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [16, 9], [16, 8], [15, 7], [14, 7], [15, 7], [14, 8], [14, 7], [15, 6], [15, 7], [14, 7], [14, 6], [13, 6], [13, 5], [12, 6], [11, 7], [12, 7], [13, 6], [12, 6], [13, 7], [12, 8], [11, 8], [12, 7], [13, 8], [14, 8], [15, 8], [16, 8], [15, 9], [14, 10], [13, 11], [12, 12], [11, 13], [10, 14], [9, 15], [8, 16], [7, 17], [6, 18], [5, 19], [4, 20], [4, 21], [4, 22], [3, 21], [3, 20], [2, 21], [1, 20], [1, 19], [0, 20], [1, 19], [2, 18], [3, 17], [4, 16], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [11, 9], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 9], [16, 10], [16, 9], [16, 10], [17, 9], [17, 10], [18, 10], [18, 11], [19, 10], [18, 10], [17, 10], [18, 9], [19, 8], [20, 8], [19, 9], [18, 10], [17, 11], [16, 12], [15, 13], [14, 14], [13, 15], [12, 16], [11, 17], [10, 18], [9, 19], [8, 20], [7, 21], [6, 22], [5, 22], [4, 22], [5, 21], [6, 20], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [16, 9], [16, 8], [17, 8], [18, 8], [19, 7], [19, 8], [20, 9], [19, 8], [19, 9], [20, 10], [19, 10], [18, 9], [19, 10], [20, 9], [21, 8], [21, 7], [20, 8], [20, 7], [21, 8], [20, 7], [20, 6], [19, 5], [18, 6], [17, 7], [16, 8], [15, 9], [14, 10], [13, 11], [12, 12], [11, 13], [10, 14], [9, 15], [8, 16], [7, 17], [6, 18], [5, 19], [4, 20], [4, 21], [4, 22], [4, 23], [3, 23], [3, 24], [2, 23], [1, 23], [1, 22], [2, 21], [3, 20], [4, 19], [5, 18], [6, 17], [7, 16], [8, 15], [9, 14], [10, 13], [11, 12], [12, 11], [13, 10], [14, 9], [15, 8], [16, 8], [17, 7], [16, 7], [17, 6], [17, 5], [17, 4], [16, 3], [17, 4], [18, 5], [17, 5], [17, 4], [16, 5], [15, 6], [16, 5], [17, 4], [18, 5], [17, 6], [16, 7], [15, 8], [14, 9], [13, 10], [12, 11], [11, 12], [10, 13], [9, 14], [8, 15], [7, 16], [6, 17], [5, 18], [4, 19], [4, 20], [4, 21], [4, 22], [5, 21], [6, 20], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [16, 9], [16, 8], [15, 9], [16, 10], [17, 9], [17, 8], [18, 9], [17, 8], [16, 9], [15, 9], [16, 9], [16, 10], [16, 9], [17, 9], [18, 8], [19, 9], [18, 8], [18, 9], [17, 10], [18, 9], [17, 8], [18, 8], [17, 8], [16, 8], [15, 9], [14, 10], [13, 11], [12, 12], [11, 13], [10, 14], [9, 15], [8, 16], [7, 17], [6, 18], [5, 19], [4, 20], [4, 21], [4, 22], [3, 23], [3, 24], [2, 24], [1, 24], [2, 25], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [15, 12], [14, 11], [13, 10], [12, 9], [11, 8], [10, 7], [9, 6], [8, 5], [7, 4], [6, 3], [5, 2], [4, 1], [3, 0], [2, 0], [1, 0], [0, 0], [0, 0]]]

HR_TOTAL_TIME=401
TOTAL_TIME=201
TRAINED_DOWNSCALER_PATH="./trained_model_401_to_201.pth"


class NeuralDownscaler(Module):
    def __init__(self):
        super(NeuralDownscaler, self).__init__()
        self.seq = Sequential(
            Linear(2 * HR_TOTAL_TIME,1024),
            ReLU(),
            Linear(1024,2 * TOTAL_TIME)
        )

    def forward(self, x):
        x = x.view(-1, 2 * HR_TOTAL_TIME)
        x = self.seq(x)
        x = x.view(-1,TOTAL_TIME,2)
        return x
    
    def load_pretrained_model(self):
        pretrained_weights = load(TRAINED_DOWNSCALER_PATH)
        self.load_state_dict(pretrained_weights)

downscaler_nn = NeuralDownscaler().to(device)
downscaler_nn.load_pretrained_model()
tensor_input = tensor(np.array(input,dtype=np.float32)).to(device)
with no_grad():
  output_tensor = downscaler_nn(tensor_input) / 2

int_list = output_tensor.round().int().tolist()

print(int_list)

x = [pair[0] for pair in int_list[1]]
y = [pair[1] for pair in int_list[1]]
plt.plot(x, y, linestyle='-', color='red', label='Lines')
plt.scatter(x, y, label='Data Points', color='blue', marker='o')
plt.xlim(0, 15)
plt.ylim(0, 15)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot with Lines Connecting Data Points')
plt.legend()
plt.show()